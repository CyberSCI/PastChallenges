import math
import re
import subprocess

BITS = 4096
PRIMES = 64

n = 1396563444211487537827052161515397903133412627391058944597782702464787021199773988755469989839161873611628565826764735360757440473283363018658472656023477606279632531370080365771733046471101341523344163915153205658252254897039229559700839427230614352242460994698982370973298095095984585567741023970387869765367659556857143230815751632832632314533693373019727155356293693427888909721030534585249383948540964008612443690809224746045652769735622897558638463627802521465672756859435565971981653812879667040619465832137006521942495324590817331642375445180985964959505865149913819662732789903859505574539019433260279474044897595350730320178021274309428457702693174762893522151291480942052136052446049950887485028404085445369302147413414745834609044810795296089310993988605457721395653190196844259543817306474178282060350824310864519582483286295580844511360471435188998334804814488570102059068006497375023988904720591430234016937405867546133932701307714195791765334461309789380882164851634111064236715775324597660378592366554951540015315959582512983608877886340559809128165556711672070472270207859477900262089274330698028784700037320100498924377965158026985919215306439262585614167800236964722360683888910612190670280800271090882487
e = 65537
c = 1331630608164118701110589902448045526795634795949201293938164373055439675365325075842944694239529434859503235366753944667433781463512714023607640665683884861967207208445219336692332099463045747325846729774102342463491567707300120278562089279161874549168238467628093199896639199220979514544381462252442095059614536055458725678150631522569170164488132152071791628133143309063892212613543932989352230508044681147760733069527900878961361391323770989346404787310680808316565328601036885664688323739935997092999420474614800652341371104621526165370334380273088399853104174595625934270288361218610112172454500009127292480691079273002598483561934771517423532356802352188421008725178998648641687078172483305785196809918099315681664954137094890087802040380938856581851677143815282116915444563168501673933625563428827442907474037492257624374489234486643363287967893306008665667176777704234069834056126405474917324001174856368166534818715495405529172045327685729139565263573714820386889856592862341561527900832636362864091665605564620191834238635211601105249454958078105460338973688605328251823150352674993204267866437171465674282513742926702478677491872688559066639143586237244213130492750053270411411864493105981845722646316256316964912


def factorize(composite):
    # Run ecm process
    process = subprocess.Popen(['ecm', '-c', '-1', '11e3', '1.9e6'], stdin=subprocess.PIPE, stdout=subprocess.PIPE)
    
    # Write composite to stdin
    out, _ = process.communicate(input=str(composite).encode() + b'\n')
    
    # Wait for process to finish
    process.wait()
    
    # Read factors from stdout
    factors = []
    for line in out.splitlines():
        if b'prime' in line or b'Prime' in line:
            prime = re.search(b'[0-9]{10,}', line).group().decode()
            factors.append(int(prime))
    
    # Return factors
    return factors


# Factorize remaining composite until all primes are found
composite = n
primes = []
while composite != 1:
    print('Factoring composite:', composite)
    primes.extend(factorize(composite))
    
    # Recalculate remaining composite
    composite = n // math.prod(primes)

# Primes found
print('Primes found:', primes)

# Decrypt flag
phi = math.prod(p - 1 for p in primes)
d = pow(e, -1, phi)

m = pow(c, d, n)
flag = int.to_bytes(m, (m.bit_length() + 7) // 8, 'big').decode()

print('Flag:')
print(flag)